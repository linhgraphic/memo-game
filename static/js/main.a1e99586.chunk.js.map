{"version":3,"sources":["utils/index.js","contants/index.js","components/Card/index.jsx","components/Timer/index.jsx","components/MessageBoard/index.jsx","components/StartPanel/index.jsx","components/Header/index.jsx","components/Modal/index.jsx","components/Record/index.jsx","components/RecordPanel/index.jsx","utils/LocalStorageManager/index.js","App.js","serviceWorker.js","index.js"],"names":["shuffle","arr","j","i","length","Math","floor","random","parseTime","time","round","slice","baseCards","noop","Card","onClick","symbol","id","flipped","identical","cardNumber","cardRef","useRef","offsetWidth","ref","className","style","width","height","fontSize","current","Timer","hh","mm","ss","MessageBoard","result","title","setTitle","saveRecord","onClose","float","type","name","placeholder","required","value","maxLength","onChange","disabled","StartPanel","setCardNumber","onStart","min","max","Header","currentTime","onReset","cardDisplayTime","onLoadRecordPanel","onSaveCardNumber","onSaveCardDisplayTime","role","aria-label","Modal","children","open","Record","date","finishTime","record","data-record","join","RecordPanel","element","availableRecords","deleteAll","deleteRecord","onDeleteRecord","event","records","currentTarget","dataset","filter","hasOwnProperty","map","index","key","Object","keys","values","loadSavedValues","JSON","parse","localStorage","getItem","savedSetting","setItem","App","initialCardNumber","initialCardDisplayTime","useState","setCardDisplayTime","setRecords","initialiseDeck","useCallback","deck","concat","onSetCardNumber","target","cards","setCards","Set","flippedCards","setFlippedCards","identicals","setIdenticals","gameCompleted","setGameCompleted","setResult","setCurrentTime","isGameStarted","SetGameStarted","loadRecordPanel","SetLoadRecordPanel","useEffect","timeout","setTimeout","clearTimeout","stringify","onCardClick","numberOfFlippedCards","size","next","add","has","tempRecord","Date","toDateString","some","getTime","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1e99586.chunk.js","sourcesContent":["export const shuffle = (arr) => {\r\n  let i = arr.length,\r\n    j;\r\n  for (; --i; ) {\r\n    [arr[i], arr[j]] = [arr[(j = Math.floor(Math.random() * i))], arr[i]];\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport const parseTime = (time) => {\r\n  const hh = (\"0\" + Math.round(time / 3600)).slice(-2);\r\n  const mm = (\"0\" + Math.round((time % 3600) / 60)).slice(-2);\r\n  const ss = (\"0\" + Math.round(time % 60)).slice(-2);\r\n  return [hh, mm, ss];\r\n};\r\n","export const baseCards = [\r\n  \"🧡\",\r\n  \"💘\",\r\n  \"📩\",\r\n  \"↩\",\r\n  \"👿\",\r\n  \"🔥\",\r\n  \"😷\",\r\n  \"🚵\",\r\n  \"🚩\",\r\n  \"😂\",\r\n  \"🏂\",\r\n  \"🥰\",\r\n  \"💥\",\r\n  \"🙈\",\r\n  \"⛱️\",\r\n  \"🧭\",\r\n  \"⚽\",\r\n  \"🦄\",\r\n];\r\n","import React, { useRef } from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst noop = () => null;\r\n\r\nconst Card = ({ onClick, symbol, id, flipped, identical, cardNumber }) => {\r\n  const cardRef = useRef({ offsetWidth: 0 });\r\n\r\n  return (\r\n    <div\r\n      ref={cardRef}\r\n      className={`card ${flipped || identical ? \"flipped\" : \"\"}`}\r\n      onClick={flipped || identical ? noop : onClick}\r\n      id={id}\r\n      cardNumber={cardNumber}\r\n      style={{\r\n        width: `calc(60vmin/${cardNumber / 2})`,\r\n        height: `calc(100vmin/${cardNumber / 2})`,\r\n        fontSize: cardRef.current.offsetWidth * 0.6,\r\n      }}\r\n    >\r\n      <div\r\n        className={`display-symbol${flipped || identical ? \" flipped\" : \"\"}`}\r\n      >\r\n        {symbol}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Timer.css\";\r\nimport { parseTime } from \"../../utils\";\r\n\r\nconst Timer = ({ time }) => {\r\n  const [hh = 0, mm = 0, ss = 0] = parseTime(time);\r\n  return (\r\n    <div className=\"Timer\">\r\n      {hh}:{mm}:{ss}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport Timer from \"../Timer\";\r\nimport \"./MessageBoard.css\";\r\n\r\nconst MessageBoard = ({\r\n  result,\r\n  time,\r\n  title,\r\n  setTitle,\r\n  saveRecord,\r\n  onClose,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <button className=\"close\" style={{ float: \"right\" }} onClick={onClose}>\r\n        Close\r\n      </button>\r\n      <div className=\"message\">\r\n        <h1>{result}</h1>\r\n        <h2>\r\n          You finished the game in <Timer time={time} />\r\n        </h2>\r\n        <input\r\n          type=\"text\"\r\n          name=\"recordTitle\"\r\n          id=\"recordTitle\"\r\n          placeholder=\"please type the title\"\r\n          required={true}\r\n          value={title}\r\n          maxLength={10}\r\n          onChange={setTitle}\r\n        />\r\n        <button disabled={!title} onClick={saveRecord}>\r\n          Save record\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageBoard;\r\n","import React from \"react\";\r\nimport \"./StartPanel.css\";\r\n\r\nexport const StartPanel = ({ cardNumber, setCardNumber, onStart }) => {\r\n  return (\r\n    <div className=\"start-panel\">\r\n      <h2>Select Number of cards</h2>\r\n      <h5>maximum 18 cards</h5>\r\n      <input\r\n        value={cardNumber}\r\n        type=\"number\"\r\n        min={1}\r\n        max={18}\r\n        onChange={setCardNumber}\r\n      />\r\n      {cardNumber < 1 || cardNumber > 18 ? (\r\n        <h5>You can't select out-of-range Number. Please try again</h5>\r\n      ) : (\r\n        <button onClick={onStart}>Start</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Timer from \"../Timer\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({\r\n  currentTime,\r\n  onReset,\r\n  cardNumber,\r\n  cardDisplayTime,\r\n  onLoadRecordPanel,\r\n  onSaveCardNumber,\r\n  onSaveCardDisplayTime,\r\n}) => (\r\n  <header>\r\n    <h1 className=\"timer\">\r\n      <span role=\"img\" aria-label=\"timer\">\r\n        ⏳\r\n      </span>{\" \"}\r\n      <Timer time={currentTime} />\r\n    </h1>\r\n    <button className={\"reset-button\"} onClick={onReset}>\r\n      Reset\r\n    </button>\r\n    <div className=\"setting-button\">\r\n      <button className=\"gear-icon\">\r\n        <span role=\"img\" aria-label=\"setting\">\r\n          ⚙️\r\n        </span>\r\n      </button>\r\n      <div className=\"setting-panel\">\r\n        <div>\r\n          Card display seconds:{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            id=\"card-flash\"\r\n            min=\"1\"\r\n            max=\"10\"\r\n            value={cardDisplayTime}\r\n            onChange={onSaveCardDisplayTime}\r\n          />\r\n        </div>\r\n        <div>\r\n          Number of cards:{\" \"}\r\n          <input\r\n            type=\"number\"\r\n            id=\"card-flash\"\r\n            min=\"1\"\r\n            max=\"18\"\r\n            value={cardNumber}\r\n            onChange={onSaveCardNumber}\r\n          />\r\n        </div>\r\n        <button className=\"load-records\" onClick={onLoadRecordPanel}>\r\n          Load records\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nconst Modal = ({ children, onClick = () => null, open }) => (\r\n  <div onClick={onClick} className={`modal${open ? \" open\" : \"\"}`}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport { parseTime } from \"../../utils\";\r\nimport \"./Record.css\";\r\n\r\nconst Record = ({ date, cardNumber, finishTime, onClick, record }) => {\r\n  return (\r\n    <div data-record={record} onClick={onClick} className=\"record-container\">\r\n      <ul>\r\n        <li>date: {date}</li>\r\n        <li>finish time: {parseTime(finishTime).join(\":\")}</li>\r\n        <li>card number: {cardNumber}</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Record;\r\n","import React from \"react\";\r\nimport Record from \"../../components/Record\";\r\nimport \"./RecordPanel.css\";\r\n\r\nconst removeRecord = (records, id) => {\r\n  return records.filter((record) => !record.hasOwnProperty(id));\r\n};\r\n\r\nconst RecordPanel = ({\r\n  availableRecords,\r\n  deleteAll,\r\n  onClose,\r\n  deleteRecord,\r\n}) => {\r\n  let element;\r\n  const onDeleteRecord = (event) => {\r\n    deleteRecord(\r\n      removeRecord(availableRecords, event.currentTarget.dataset.record)\r\n    );\r\n  };\r\n  if (availableRecords.length) {\r\n    element = availableRecords.map((record, index) => {\r\n      return (\r\n        <Record\r\n          onClick={onDeleteRecord}\r\n          key={index}\r\n          record={Object.keys(record)[0]}\r\n          date={Object.values(record)[0].date}\r\n          finishTime={Object.values(record)[0].finishTime}\r\n          cardNumber={Object.values(record)[0].cardNumber}\r\n        />\r\n      );\r\n    });\r\n  } else\r\n    element = <h4 style={{ width: \"50vmin\" }}>You don't have any record</h4>;\r\n  return (\r\n    <div>\r\n      <div className=\"record-panel\">{element}</div>{\" \"}\r\n      <div className=\"record-panel-button\">\r\n        <button onClick={deleteAll}>Delete all</button>\r\n        <button onClick={onClose}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordPanel;\r\n","export const loadSavedValues = (key) => JSON.parse(localStorage.getItem(key));\r\n\r\nexport const saveRecord = (key, record) =>\r\n  localStorage.setItem(key, JSON.stringify(record));\r\n\r\nexport const savedSetting = (key, value) => localStorage.setItem(key, value);\r\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport \"./App.css\";\nimport { shuffle } from \"./utils\";\nimport { baseCards } from \"./contants\";\nimport Card from \"./components/Card\";\nimport MessageBoard from \"./components/MessageBoard\";\nimport { StartPanel } from \"./components/StartPanel\";\nimport Header from \"./components/Header\";\nimport Modal from \"./components/Modal\";\nimport RecordPanel from \"./components/RecordPanel\";\nimport {\n  loadSavedValues,\n  savedSetting,\n  saveRecord,\n} from \"./utils/LocalStorageManager\";\n\nfunction App() {\n  const initialCardNumber = loadSavedValues(\"initialCardNumber\");\n  const initialCardDisplayTime = loadSavedValues(\"initialCardDisplayTime\");\n  const [cardNumber, setCardNumber] = useState(initialCardNumber || 2);\n  const [cardDisplayTime, setCardDisplayTime] = useState(\n    initialCardDisplayTime || 1\n  );\n  const [title, setTitle] = useState(\"\");\n  const [records, setRecords] = useState(loadSavedValues(\"records\") || []);\n\n  const initialiseDeck = useCallback(() => {\n    const deck = shuffle(baseCards).slice(0, cardNumber);\n    return shuffle([].concat(deck).concat(deck));\n  }, [cardNumber]);\n\n  const onSetCardNumber = (event) => {\n    setCardNumber(event.target.value);\n  };\n  const onSetCardDisplayTime = (event) =>\n    setCardDisplayTime(event.target.value);\n  const [cards, setCards] = useState(initialiseDeck);\n  const [flippedCards, setFlippedCards] = useState(new Set());\n  const [identicals, setIdenticals] = useState(new Set());\n  const [gameCompleted, setGameCompleted] = useState(false);\n  const [result, setResult] = useState(\"\");\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isGameStarted, SetGameStarted] = useState(false);\n  const [loadRecordPanel, SetLoadRecordPanel] = useState(false);\n\n  const onSetTitle = (event) => {\n    !records.some((record) => record.hasOwnProperty(event.target.value))\n      ? setTitle(event.target.value)\n      : setTitle(\"\" + new Date().getTime());\n  };\n\n  const onSaveRecord = () => {\n    let tempRecord = {};\n    let date = new Date().toDateString();\n    tempRecord[title] = {\n      date: date,\n      finishTime: currentTime,\n      cardNumber: cardNumber,\n    };\n    setRecords([...records, tempRecord]);\n  };\n  const onDeleteRecord = (record) => {\n    setRecords(record);\n    console.log(record);\n  };\n  const onDeleteAll = () => {\n    setRecords([]);\n  };\n  const onLoadRecordPanel = () => SetLoadRecordPanel(true);\n  useEffect(() => {\n    const timeout = setTimeout(() => setCurrentTime(currentTime + 1), 1000);\n    if (gameCompleted || !isGameStarted) {\n      clearTimeout(timeout);\n    }\n    return () => clearTimeout(timeout);\n  }, [currentTime, gameCompleted, isGameStarted]);\n\n  useEffect(() => {\n    savedSetting(\"initialCardNumber\", cardNumber);\n    savedSetting(\"initialCardDisplayTime\", cardDisplayTime);\n  }, [cardNumber, cardDisplayTime]);\n\n  useEffect(() => saveRecord(\"records\", records), [records]);\n  const onGameStart = () => {\n    setTitle(\"\");\n    SetGameStarted(true);\n    SetLoadRecordPanel(false);\n    setCards(initialiseDeck());\n    setFlippedCards(new Set());\n    setIdenticals(new Set());\n    setGameCompleted(false);\n    setCurrentTime(0);\n  };\n\n  const onReset = () => {\n    setCards(initialiseDeck());\n    setFlippedCards(new Set());\n    setIdenticals(new Set());\n    setGameCompleted(false);\n    setCurrentTime(0);\n    SetGameStarted(false);\n  };\n  const onCardClick = (event) => {\n    const numberOfFlippedCards = flippedCards.size;\n    const id = +event.currentTarget.id;\n\n    if (numberOfFlippedCards) {\n      if (numberOfFlippedCards > 1) {\n        return;\n      }\n      if (cards[flippedCards.values().next().value] === cards[id]) {\n        setIdenticals(identicals.add(flippedCards.values().next().value));\n        setIdenticals(identicals.add(id));\n      }\n      if (identicals.size === cards.length) {\n        setResult(\"You Win!!!\");\n        setGameCompleted(true);\n        return;\n      }\n      setTimeout(() => {\n        setFlippedCards(new Set());\n      }, cardDisplayTime * 1000);\n    }\n    setFlippedCards(new Set(flippedCards.add(id)));\n  };\n\n  return (\n    <div className=\"app\">\n      <Header\n        onSaveCardNumber={onSetCardNumber}\n        onSaveCardDisplayTime={onSetCardDisplayTime}\n        {...{\n          onLoadRecordPanel,\n          currentTime,\n          isGameStarted,\n          onReset,\n          cardNumber,\n          cardDisplayTime,\n        }}\n      />\n      <div className=\"deck-container\">\n        {cards.map((symbol, index) => (\n          <Card\n            key={index}\n            symbol={symbol}\n            id={index}\n            onClick={onCardClick}\n            flipped={flippedCards.has(index)}\n            identical={identicals.has(index)}\n            {...{ cardNumber: cards.length }}\n          />\n        ))}\n        <Modal open={!isGameStarted}>\n          <StartPanel\n            onStart={onGameStart}\n            cardNumber={cardNumber}\n            setCardNumber={onSetCardNumber}\n          />\n        </Modal>\n        <Modal open={gameCompleted}>\n          <MessageBoard\n            result={result}\n            time={currentTime}\n            title={title}\n            saveRecord={onSaveRecord}\n            setTitle={onSetTitle}\n            onClose={onReset}\n          />\n        </Modal>\n        <Modal open={loadRecordPanel}>\n          <RecordPanel\n            availableRecords={records}\n            deleteRecord={onDeleteRecord}\n            onClose={() => SetLoadRecordPanel(false)}\n            deleteAll={onDeleteAll}\n          />\n        </Modal>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}